= Ajax

<b>A Ruby on Rails plugin to augment a traditional Rails application with a completely AJAX frontend, while transparently handling issues important to both the enterprise and end users, such as testing, SEO and browser history.</b>

The Ajax philosophy is that you should not have to develop for AJAX:  Your code shouldn't change; your tests shouldn't change; and the way Google sees your site shouldn't change.  (Coming soon, this link {AJAX site crawling specification}[http://code.google.com/web/ajaxcrawling/docs/getting-started.html] may obviate that.)

The beauty of Ajax is that your Rails application only ever sees traditional requests, so it does not have to be "Ajax aware".

Ajax is being used live in production on altnet.com[http://altnet.com], if you would like to try it out (as of May 1st 2010 or thereabouts).

== Install

Install as a Rails plugin only.  See *Compatibility*.

 ./script/plugin install http://github.com/kjvarga/ajax.git

   created: config/initializers/ajax.rb
   created: public/javascripts/ajax.js
   created: public/javascripts/jquery.address-1.2rc.js
   created: public/javascripts/jquery.address-1.2rc.min.js
   created: public/javascripts/jquery.json-2.2.min.js
   created: public/images/loading-icon-small.gif

== Introduction

Ajax handles these common problems:

* SEO/Crawlability/Google Analytics support
* Browser History
* Bookmarkability / Deep-linking
* Redirects
* Cookies
* Lazy-loaded Assets
* Activating Tabs
* Request Rewriting & Redirecting

Ajax requires very little configuration and will work out of the box.  With a few lines of code you can start enjoying a completely AJAX site.

What do I mean by "completely AJAX"?  Everyone uses AJAX.  The difference is that when you go completely AJAX it means that the main page is only loaded once.  Every link now loads content via AJAX.  But unless we change the URL, we will have no history, because that is how browsers determine when your history changes.  The only way to change the URL without causing the browser to make a new request, is to modify the named anchor, or "hashed" part of the URL.  

So now your traditional links auto-magically load content via AJAX into a page container and update the browser URL with the new URL, creating history and enabling bookmarkability.

Where before you would have seen something like <tt>http://example.com/the-beatles/history</tt>, now you would see <tt>http://example.com/#/the-beatles/history</tt>.  Notice the <tt>#/</tt>?

=== How does it work?

Ajax comprises Rack middleware, Rails integrations and some JavaScript libraries to handle everything from redirecting and rewriting incoming requests, to managing the response headers and content, to handling the browser URL, JavaScript callbacks and client-side events.

Browsers do not send the hashed part of the the URL with page requests, so to an AJAX-ed application, all requests look like they are for root (<code>/</code>).

In order to load the correct page we must first render a framework page with accompanying JavaScript.  The JS examines the URL and then issues another request to the server for the hashed part (which may still be <code>/</code> if the user requested the home page).

=== An Example User Interaction

1. User pastes http://example.com/#/beyonce/albums into a browser.
2. Server receives request for http://example.com/ and renders the framework page.
4. AJAX request for http://example.com/beyonce/albums is initiated by client-side JavaScript, and received by the server.
5. Server renders http://example.com/beyonce/albums.
6. Response headers are processed and the response inserted into the page container.

=== Request Handling

Ajax uses a custom HTTP header <tt>Ajax-Info</tt> to pass JSON back and forth between the client and server.  The client sends information about the state of the container, and the server sends new information back.

There are <tt>ActionView</tt> and <tt>ActionController</tt> helpers to make it easy to set headers in the response.  Certain headers have special meaning and can trigger events in your application JavaScript.

=== Robots and External APIS

We detect robots by their User-Agent strings.  If a robot is detected the Ajax handling is bypassed and the robot sees the traditional Rails application.

By default any AJAX or non-GET requests pass through unmodified.

If you need to expose external APIs you can do so using a regular expression that is matched against incoming URLs.

=== How do I use it?

Little to no configuration is required.

Rails helpers are provided to help you manage the response handling and there are Spec helpers for testing your Rack middleware and your Rails integration.

== Compatibility

You must be running <b>jQuery 1.4.2</b> to use this plugin.  Sorry, Prototype users.

The following JavaScript libraries are required and included in the plugin:

* {jQuery Address 1.2RC}[http://www.asual.com/jquery/address/]
* jQuery JSON 2.2

=== Ruby and Rails:

  * Rails 2.3.4 running Ruby 1.8.7 and Ruby 1.9
  * Rails 2.3.5 running Ruby 1.8.7 and Ruby 1.9
  
=== Browsers:

(See {jQuery address supported browsers}[http://www.asual.com/jquery/address/docs/].)

  * Internet Explorer 6.0+
  * Mozilla Firefox 1.0+
  * Safari 1.3+
  * Opera 9.5+
  * Chrome 1.0+
  * Camino 1.0+

= Documentation

== Configuration

It is important to be able to disable the plugin when you don't want it interfering, like when you are testing.  You will also want to ensure that your site's JavaScript still works when the plugin is disabled.

To disable the plugin in your environment file:
  
  # config/environments/test.rb
  Ajax.enabled = false

If you need to, you can check the state of the plugin with:

  Ajax.is_enabled?

Other onfiguration goes in <tt>config/initializers/ajax.rb</tt> such as indicating which links to except from the request processing.  See <i>Excepted Links</i> below.

== Link Handling

All links which are rendered using the <tt>link_to</tt> (or any other url) helper method automatically include a <tt>data-deep-link</tt> attribute containing the path from the link's HREF.

The Ajax JavaScript class listens for clicks on any link with a <tt>data-deep-link</tt> attribute and loads the link's content using AJAX.

Should you need to, you can set this attribute on a link by passing in HTML options to <tt>link_to</tt>:

  link_to odd_url, {}, { :data-deep-link => '/even/odder/url' }
 
=== Excepted Links

Excepted links bypass Ajax request and link handling.  I call these traditional links.

Links can be excepted by passing in strings or regular expressions to <code>Ajax.exclude_paths()</code>.  Only pass the path and not the full URL.  The path will be modified to match against other paths as well as against full URLs:

  # config/initializers/ajax.rb
  Ajax.exclude_paths %w[ /login /logout /signup /altnet-pro /my-account/edit /user-session/new ]
  Ajax.exclude_paths [%r[\/my-account\/.*]]
  
Typically, we except pages that require HTTPS, like signup forms, because including secure forms on an insecure page often triggers a browser warning.

Excepted links when rendered do not contain the <tt>data-deep-link</tt> attribute if they are rendered with the <tt>link_to</tt> (or any other url) helper method.

== Request Handling

Ajax uses a custom HTTP header <tt>Ajax-Info</tt> to pass JSON back and forth between the client and server.  The client sends information about the state of the container, and the server sends new information back.

There are <tt>ActionView</tt> and <tt>ActionController</tt> helpers to make it easy to set headers in the response.

<b><tt>Ajax-Info</tt> headers with special meaning:</b>

[title]      Set the page title.
[tab]        jQuery selector, triggers the <tt>activate</tt> event on matched element(s).
[container]  The container to receive the content, or <tt>default_container</tt>.
[assets]     JavaScript and CSS assets to load.
[callbacks]  Callbacks to execute after assets have finished loaded.

More docs to come...

== Contributions

Contributions are welcome.  Please fork the project and send me a pull request with your changes and Spec tests.

== Useful Resources

* AjaxPatters[http://ajaxpatterns.org/Unique_URLs] useful discussion of techniques for maintaining state using JavaScript to poll for changes to <tt>window.location.hash</tt>.
* link jQuery Address[http://www.asual.com/jquery/address/] JavaScript library for managing the URL.
* SWFAddress[http://www.asual.com/swfaddress/] deep linking solution for Flash.

Copyright (c) 2010 Karl Varga, released under the MIT license
